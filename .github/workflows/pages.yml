name: Deploy Flask App to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup Pages
        uses: actions/configure-pages@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask python-dotenv jinja2 flask-cors
      
      - name: Verify Flask app structure
        run: |
          # Check for required files
          if [ ! -d "House_Code" ]; then
            echo "ERROR: House_Code directory not found!"
            exit 1
          fi
          
          if [ ! -f "House_Code/templates/index.html" ]; then
            echo "ERROR: Flask template missing at House_Code/templates/index.html"
            exit 1
          fi
          
          echo "âœ… Required Flask app structure verified"
      
      - name: Build static site from Flask app
        run: |
          mkdir -p gh-pages/svg
          
          # Copy SVG files from _svg_assets - REQUIRED
          if [ -d "_svg_assets" ]; then
            echo "Found _svg_assets directory with files:"
            ls -la _svg_assets/
            cp _svg_assets/*.svg gh-pages/svg/
            echo "Copied SVG files from _svg_assets directory"
          else
            echo "ERROR: Required _svg_assets directory missing"
            exit 1
          fi
          
          # Process Flask application template using Python
          cat > render_template.py << 'EOF'
import os
import json
from jinja2 import Environment, FileSystemLoader

# Layer information
layers = [
    {"id": "environment-layer", "name": "Environment", "default": True},
    {"id": "house-structure", "name": "House Structure", "default": True},
    {"id": "html-tags-layer", "name": "HTML Tags", "default": False},
    {"id": "structure-layer", "name": "HTML Structure", "default": False},
    {"id": "css-design-layer", "name": "CSS Design", "default": False},
    {"id": "interactive-layer", "name": "JavaScript Interactivity", "default": False},
    {"id": "systems-layer", "name": "Backend Systems", "default": False}
]

# Chapter presets
chapters = [
    {
        "name": "Base House",
        "preset": "base",
        "description": "The complete house with all visual elements",
        "layers": ["environment-layer", "house-structure"]
    },
    {
        "name": "Chapter 1: HTML Tags",
        "preset": "html-tags",
        "description": "The blueprint layer showing HTML tags",
        "layers": ["environment-layer", "house-structure", "html-tags-layer"]
    },
    {
        "name": "Chapter 2: HTML Structure",
        "preset": "html-structure",
        "description": "The structural framing of the house",
        "layers": ["environment-layer", "structure-layer"]
    },
    {
        "name": "Chapter 3: CSS Design",
        "preset": "css-design",
        "description": "The design layer with visual styling",
        "layers": ["environment-layer", "house-structure", "css-design-layer"]
    },
    {
        "name": "Chapter 4: JavaScript",
        "preset": "javascript",
        "description": "The interactive elements that respond to events",
        "layers": ["environment-layer", "house-structure", "interactive-layer"]
    },
    {
        "name": "Chapter 5: Backend",
        "preset": "backend",
        "description": "The internal systems that power the house",
        "layers": ["environment-layer", "house-structure", "systems-layer"]
    }
]

# GitHub info from environment variables
github_username = os.environ.get("GITHUB_USERNAME", "TortoiseWolfe")
repo_name = os.environ.get("REPO_NAME", "The_House_that_Code_Built")
github_pages_url = os.environ.get("GITHUB_PAGES_URL", f"https://{github_username}.github.io/{repo_name}")

# Load the template
loader = FileSystemLoader("House_Code/templates")
env = Environment(loader=loader)
template = env.get_template("index.html")

# Render the template with our data
html = template.render(
    layers=layers,
    chapters=chapters,
    github_username=github_username,
    repo_name=repo_name,
    github_pages_url=github_pages_url
)

# Fix SVG paths for GitHub Pages (important!)
html = html.replace("/svg/", "svg/")

# Write the rendered template to the output file
with open("gh-pages/index.html", "w") as f:
    f.write(html)

print("Successfully rendered Flask template to gh-pages/index.html")
EOF
          
          # Execute the template rendering
          python render_template.py
          
          # Verify the result was created
          if [ ! -f "gh-pages/index.html" ]; then
            echo "ERROR: Failed to generate index.html"
            exit 1
          fi
          
          # Verify SVG files were copied
          if [ ! "$(ls -A gh-pages/svg/)" ]; then
            echo "ERROR: No SVG files were copied to gh-pages/svg/"
            exit 1
          fi
          
          echo "Contents after building:"
          find gh-pages -type f | sort
      
      - name: Check artifact content
        run: |
          echo "Checking contents of gh-pages directory:"
          find gh-pages -type f | sort
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: './gh-pages'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2