name: Deploy Flask App to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask jinja2 python-dotenv

      - name: Display repository structure
        run: |
          echo "Repository structure:"
          ls -la
          echo ""
          echo "SVG assets:"
          ls -la _svg_assets || echo "_svg_assets directory not found"
          echo ""
          echo "House_Code contents:"
          if [ -d "House_Code" ]; then
            ls -la House_Code
            echo "House_Code/templates contents:"
            ls -la House_Code/templates || echo "templates directory not found"
          else
            echo "House_Code directory not found"
          fi
      
      - name: Build static site from Flask app
        run: |
          # Create site directory
          mkdir -p _site/svg
          
          # Copy SVG files to site directory
          if [ -d "_svg_assets" ]; then
            cp _svg_assets/*.svg _site/svg/
            echo "SVG files copied from _svg_assets"
          else
            echo "ERROR: Required _svg_assets directory not found"
            exit 1
          fi
          
          # Create a Python script to render the Flask template
          cat > render_template.py << 'EOF'
import os
import json
from jinja2 import Environment, FileSystemLoader

# Define layer information (same as in Flask app)
layers = [
    {"id": "environment-layer", "name": "Environment", "default": True},
    {"id": "house-structure", "name": "House Structure", "default": True},
    {"id": "html-tags-layer", "name": "HTML Tags", "default": False},
    {"id": "structure-layer", "name": "HTML Structure", "default": False},
    {"id": "css-design-layer", "name": "CSS Design", "default": False},
    {"id": "interactive-layer", "name": "JavaScript Interactivity", "default": False},
    {"id": "systems-layer", "name": "Backend Systems", "default": False}
]

# Define chapter presets (same as in Flask app)
chapters = [
    {
        "name": "Base House",
        "preset": "base",
        "description": "The complete house with all visual elements",
        "layers": ["environment-layer", "house-structure"]
    },
    {
        "name": "Chapter 1: HTML Tags",
        "preset": "html-tags",
        "description": "The blueprint layer showing HTML tags",
        "layers": ["environment-layer", "house-structure", "html-tags-layer"]
    },
    {
        "name": "Chapter 2: HTML Structure",
        "preset": "html-structure",
        "description": "The structural framing of the house",
        "layers": ["environment-layer", "structure-layer"]
    },
    {
        "name": "Chapter 3: CSS Design",
        "preset": "css-design",
        "description": "The design layer with visual styling",
        "layers": ["environment-layer", "house-structure", "css-design-layer"]
    },
    {
        "name": "Chapter 4: JavaScript",
        "preset": "javascript",
        "description": "The interactive elements that respond to events",
        "layers": ["environment-layer", "house-structure", "interactive-layer"]
    },
    {
        "name": "Chapter 5: Backend",
        "preset": "backend",
        "description": "The internal systems that power the house",
        "layers": ["environment-layer", "house-structure", "systems-layer"]
    }
]

# GitHub info as specified in README
github_username = "TortoiseWolfe"
repo_name = "The_House_that_Code_Built"
github_pages_url = f"https://{github_username}.github.io/{repo_name}"

# Try to load the template
template_path = "House_Code/templates/index.html"
if not os.path.exists(template_path):
    print(f"ERROR: Template not found at {template_path}")
    exit(1)

try:
    # Set up Jinja environment
    loader = FileSystemLoader(os.path.dirname(template_path))
    env = Environment(loader=loader)
    template = env.get_template(os.path.basename(template_path))
    
    # Render the template with our data
    html_content = template.render(
        layers=layers,
        chapters=chapters,
        github_username=github_username,
        repo_name=repo_name,
        github_pages_url=github_pages_url
    )
    
    # Fix paths for GitHub Pages (important!)
    html_content = html_content.replace("/svg/", "svg/")
    
    # Write the rendered HTML to the output file
    with open("_site/index.html", "w") as f:
        f.write(html_content)
    
    print("Successfully rendered Flask template to _site/index.html")
except Exception as e:
    print(f"ERROR: Failed to render template: {str(e)}")
    exit(1)
EOF
          
          # Run the rendering script
          python render_template.py
          
          # Verify the output was created
          if [ ! -f "_site/index.html" ]; then
            echo "ERROR: Failed to generate index.html"
            exit 1
          fi
          
          echo "Static site built successfully"
      
      - name: Check built files
        run: |
          echo "Built files:"
          find _site -type f | sort
          
          echo "Checking index.html content (first 20 lines):"
          head -n 20 _site/index.html
      
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: '_site'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2